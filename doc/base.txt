面向过程: 围绕函数设计的程序，也就是那些能够处理数据的代码块
面向对象: 它将数据与功能进行组合，并将其包装在被称作“对象”的东西内(编写一个大型程序或面对某一更适合此方法的问题时)

类（Class）：能够创建一种新的类型（Type）
对象（Object）：类的实例（Instance）
# 类比：你可以拥有类型 int 的变量，也就是说存储整数的变量是 int 类的实例（对象）。
# 对象可以使用属于它的普通变量来存储数据，

字段（Field）：从属于对象或类的变量
# 字段有两种类型：
## 1.实例变量（Instance Variables）：属于某一类的各个实例或对象
## 2.类变量（Class Variables）：从属于某一类本身

方法（Method）：属于类的函数
类的属性（Attribute）：字段与方法的通称

self：
# 类方法与普通函数的区别：前者必须多加一个参数在参数列表开头；
## 这个参数名必须添加到参数列表的开头，但是你不用在你调用这个功能时为这个参数赋值，Python 会为它提供
## 这种特定的变量引用的是对象本身，按照惯例，它被赋予 self 这一名称

# 数据部分——也就是字段——只不过是绑定（Bound）到类与对象的命名空间（Namespace）的普通变量
# 这就代表着这些名称仅在这些类与对象所存在的上下文中有效。这就是它们被称作“命名空间”的原因

# 字段（Field）有两种类型——类变量与对象变量，它们根据究竟是类还是对象拥有这些变量来进行分类
# 类变量（Class Variable）是共享的（Shared）——它们可以被属于该类的所有实例访问。
##该类变量只拥有一个副本，当任何一个对象对类变量作出改变时，发生的变动将在其它所有实例中都会得到体现
# 对象变量（Object variable）由类的每一个独立的对象或实例所拥有。
##在这种情况下，每个对象都拥有属于它自己的字段的副本，也就是说，它们不会被共享，也不会以任何方式与其它不同实例中的相同名称的字段产生关联

继承
# 父类又称基类，超类（superclass）
# 子类又称派生类
